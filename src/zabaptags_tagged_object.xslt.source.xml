<?sap.transform simple?>
<tt:transform
  xmlns:tt="http://www.sap.com/transformation-templates"
  xmlns:ddic="http://www.sap.com/abapxml/types/dictionary"
  xmlns:atm="http://www.devepos.com/adt/atm">

  <tt:root name="tagged_object" type="ddic:zabaptags_tagged_object"/>
  <tt:root name="object_tag" type="ddic:zabaptags_adt_object_tag" />
  <tt:root name="object_tags" type="ddic:zabaptags_adt_object_tag_t" />
  <tt:include name="zabaptags_adt_obj_ref" template="adtObjRef"/>

  <tt:template>
    <tt:apply name="taggedObject">
      <tt:with-root name="tagged_object" ref="tagged_object"/>
    </tt:apply>
  </tt:template>

  <tt:template name="taggedObject">
    <tt:context>
      <tt:root name="tagged_object"/>
    </tt:context>

    <atm:taggedObject tt:extensible="deep">
      <!-- ADT Object information -->
      <tt:cond check="exist(tagged_object.adt_obj_ref)">
        <tt:cond check="not-initial(tagged_object.adt_obj_ref)">
          <tt:apply name="adtObjRef">
            <tt:with-root name="adt_obj_ref" ref="tagged_object.adt_obj_ref" />
          </tt:apply>
        </tt:cond>
      </tt:cond>

      <!-- Tags information -->
      <tt:cond check="exist(tagged_object.tags)">
        <tt:cond check="not-initial(tagged_object.tags)">
          <tt:apply name="objectTags">
            <tt:with-root name="object_tags" ref="tagged_object.tags"/>
          </tt:apply>
        </tt:cond>
      </tt:cond>

    </atm:taggedObject>
  </tt:template>


  <!-- PUBLIC TEMPLATES (can be called from other transformations) -->
  <tt:template name="objectTag">
    <tt:context>
      <tt:root name="object_tag"/>
    </tt:context>

    <atm:adtObjectTag tt:extensible="deep">
      <tt:apply name="objectTagAttributes">
        <tt:with-root name="object_tag" ref="object_tag"/>
      </tt:apply>
    </atm:adtObjectTag>
  </tt:template>

  <!-- PUBLIC TEMPLATES (can be called from other transformations) -->
  <tt:template name="objectTagAttributes">
    <tt:context>
      <tt:root name="object_tag"/>
    </tt:context>

    <tt:cond check="not-initial(object_tag.tag_id)">
      <tt:attribute name="atm:id" value-ref="object_tag.tag_id" option="format(guid)"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.tag_name)">
      <tt:attribute name="atm:name" value-ref="object_tag.tag_name"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.owner)">
      <tt:attribute name="atm:owner" value-ref="object_tag.owner"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.parent_tag_id)">
      <tt:attribute name="atm:parentTagId" value-ref="object_tag.parent_tag_id" option="format(guid)"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.parent_uri)">
      <tt:attribute name="atm:parentObjectUri" value-ref="object_tag.parent_uri"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.parent_type)">
      <tt:attribute name="atm:parentObjectType" value-ref="object_tag.parent_type"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.parent_name)">
      <tt:attribute name="atm:parentObjectName" value-ref="object_tag.parent_name"/>
    </tt:cond>

    <tt:cond check="not-initial(object_tag.parent_alt_name)">
      <tt:attribute name="atm:parentObjectAltName" value-ref="object_tag.parent_alt_name"/>
    </tt:cond>
  </tt:template>

  <tt:template name="objectTags">
    <tt:context>
      <tt:root name="object_tags" />
    </tt:context>
    <tt:cond check="not-initial(object_tags)">
      <tt:loop ref="object_tags">
        <tt:apply name="objectTag">
          <tt:with-root name="object_tag" ref="$ref"/>
        </tt:apply>
      </tt:loop>
    </tt:cond>
  </tt:template>
</tt:transform>
